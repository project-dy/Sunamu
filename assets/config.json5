{
	// Set Sunamu's language. If empty, it will detect the system language and use that.
	// Currently supported languages: en, it, de, fr, nl, es, zh-tw, zh-cn
	language: "",
	// Would you want to use Electron to display Sunamu as a stand alone application?
	useElectron: true,
	// Would you like to spawn a local web server that makes Sunamu accessible through web browsers on your network?
	useWebserver: true,
	// If the option above is true, the option below can be used to define the port where the web server will listen.
	webserverPort: 3000,
	// Do you want to run Sunamu in debug mode?
	debugMode: false,
	// Do you want DevTools to show up at startup when debug mode is active?
	devToolsAtStartup: false,
	// How often to poll for track position? (in seconds)
	positionPollInterval: 1,
	// How often to update the track position internally? (in seconds)
	// This can improve lyrics timing if you're using a very long polling interval to not overload your system.
	positionUpdateInterval: 0.05,
	// Do you want Sunamu to download and display lyrics AT ALL?
	// If this is disabled, Sunamu will be stuck at "No lyrics found", so it is expected that you also disable the lyrics view in the scenes you use.
	lyricsActive: true,
	// Do you want Sunamu to be in karaoke mode?
	karaoke: true,
	// Do you want the lyrics to be translated? (Musixmatch only)
	translations: true,
	// Specify the language you want to use for your Musixmatch translated lyrics.
	// If it is empty, it will default to the one set in the "language" field.
	// If that one is not set either, it will default to the system language.
	mxmlanguage: "",
	// Specify your Musixmatch User Token.
	// Sunamu will automatically generate it if you don't have your own.
	mxmusertoken: "",
	// Specify the target lyrics cache folder size.
	// Less frequently shown lyrics will be purged to maintain the cache folder inside the target size.
	// Note that the operation only occurs once when Sunamu starts up, so it is possible for the cache folder to grow up in size
	// when Sunamu is opened and downloading new lyrics.
	// You can use abbreviations such as "10M" for 10 Megabytes and "1G" for 1 Gigabyte. No abbreviation such as "2000" counts as 2000 bytes.
	// Multiple-byte units are calculated following the IEC standard, so 1 Kilobyte = 1000 bytes and so on.
	// You can set this value to an empty string or to zero to never "trim" the lyrics cache, however this is not recommended.
	targetLyricsCacheSize: "10M",
	// Whether to log lyrics to a local file.
	// This is useful to streamers, for example, in the case they only use Sunamu as an OBS overlay and they want to send a playlist of the occurred stream to their followers.
	logPlayedTracksToFile: false,
	// Whether to log lyrics to a local file.
	// This is useful to streamers, for example, in the case they only use Sunamu as an OBS overlay and they want to send a playlist of the occurred stream to their followers.
	logPlayedTracksUTCTimestamps: true,
	// Specify your Last.FM username here to get the fancy play count in the details section.
	lfmUsername: "",
	// Specify your Spotify Developer Client ID and Secret here to get the Spotify URL for the playing tracks.
	spotify: {
		clientID: "",
		clientSecret: ""
	},
	discordRpc: {
		// Specify if you want your Discord Presence to show what you are playing.
		enabled: true,
		// Blacklist some apps (such as your browser) from ever showing in the Rich Presence.
		blacklist: []
	},
	shairPortSync: {
		// Specify if you want to get the duration of the track from ShairPort-Sync.
		enabled: true,
		// Specify the name of the ShairPort-Sync instance you want to get the duration from.
		mpris: "org.mpris.MediaPlayer2.ShairportSync",
		// Specify the command to get the duration of the track from ShairPort-Sync.
		command: "dbus-send --print-reply=literal --dest=org.gnome.ShairportSync /org/gnome/ShairportSync org.freedesktop.DBus.Properties.Get string:'org.gnome.ShairportSync.RemoteControl' string:'ProgressString'",
		// Set the timing offset in seconds to adjust the duration of the track from ShairPort-Sync.
		timing: 0,
		// Set the interval in milliseconds to poll for the duration of the track from ShairPort-Sync.
		// It is different from the position polling interval. Because it runs in a separate thread.
		interval: 100,
		// Set the sample rate of the track from ShairPort-Sync.
		sampleRate: 44100
	},
	// Sunamu makes use of online and offline services to get lyrics.
	// Their priority order is outlined here, top to bottom. You can also modify the order here.
	// If you're having problems with some services, you can disable them here.
	lyricsProviders: {
		Musixmatch: true,
		NetEase: true,
		Genius: true,
		Metadata: true,
		Local: true
	},
	// Do you have a player that you do not want to track at all in Sunamu? Put its name here!
	// On Linux, the name is the name of the D-Bus MPRIS2 instance, minus the "org.mpris.MediaPlayer2." prefix.
	// On Windows, the name is the App User Model ID, and you have to search for that probably.
	denylist: [],
	scenes: {
		// The following is just an example! Leave it as is.
		_example: {
			// The scene type: "default" (served over the web) or "electron" (a new Electron window is spawned for it.)
			type: "default",
			// If you want to specify a custom font override, you can do so here.
			font: "Urbanist",
			// CSS Theme to use.
			// Those are to be placed in <Sunamu's config folder>/themes/<theme name>/
			// and the theme entrypoint MUST be called "style.css".
			// "default" uses the default theme.
			theme: "default",
			// Whether or not the interface should be colorful.
			// (colored with the album art's dominant colors)
			colors: true,
			// Whether or not the default interface colors should be inverted so that the text is black and the background is white.
			// (when colors: false or when there's no color palette to be extracted)
			// Use this combined with widget mode if you are using light backgrounds on your desktop.
			defaultColorsAreInverted: false,
			// Whether or not to show a solid color as background (extracted from the cover art.)
			colorblock: false,
			// Whether or not to animate the cover art background.
			bgAnimation: true,
			// Do you want this Sunamu scene to behave like a widget?
			// No window controls, no "Playing on <player>", just controls and lyrics over transparent background.
			// NOTE: Custom themes can modify the behaviour of the widget mode or not support it at all.
			widgetMode: true,
			// Whether or not Sunamu should forcefully hide itself the moment nothing is playing.
			// Note that this will FORCEFULLY hide Sunamu when nothing is playing, so only use it
			// for non-interactive widgets / displays!
			hideWhenNotPlaying: false,
			// Whether or not to show the playing indicator at the top right (or top center) of the screen.
			// Note that this is disabled by default if you're using the widget mode and it cannot be turned on separately.
			showPlayingIndicator: true,
			// Whether or not to show the player icon, if supported, next to the playing indicator.
			playerIcon: true,
			// Disable ALL (mouse / touch) interactions on Sunamu?
			nonInteractive: false,
			// Disable the idle animation?
			// If this is set to true, idling will NOT collapse the media control panel.
			static: false,
			// Now, the exact opposite of what's above.
			// If this is set to true, no matter what you do but the media control panel will ALWAYS be collapsed.
			// BUT the mouse pointer will remain on display!
			// If you set both to true, forceIdle will win.
			forceIdle: false,
			// Whether or not the info container (album art and metadata) should be displayed.
			showInfoContainer: true,
			// Whether or not the album art should be displayed.
			showAlbumArt: true,
			// Whether or not ALL the controls (play / pause / next / previous etc. PLUS lastfm / spotify buttons) should be displayed.
			// It only affects the collapsed media control panel.
			showControls: true,
			// Whether or not to show the LastFM and Spotify buttons in the controls row.
			showExtraButtons: true,
			// Whether or not the progress bar should be displayed.
			// It only affects the collapsed media control panel.
			showProgress: true,
			// Whether or not to show the played count under the track title.
			// It only affects the collapsed media control panel.
			showPlayCountInfo: true,
			// Whether or not to show lyrics.
			// If this is set to false, then "static" is forced to be true.
			showLyrics: true,
			// Whether or not to use the blur effect on the verses.
			lyricsBlur: true,
			// Whether or not clicking on a verse or word should skip to that point in the track.
			clickableLyrics: true
		},
		default: {
			type: "default",
			theme: "default"
		},
		electron: {
			type: "electron",
			widgetMode: true,
			colors: false,
			// If you want a minimal music controller just uncomment the following lines.
			// (OMG!Ubuntu! blog post readers, I am talking to you)
			// showExtraButtons: false,
			// showLyrics: false,
		},
		"obs-studio": {
			type: "default",
			widgetMode: true,
			hideWhenNotPlaying: true,
			nonInteractive: true,
			static: true,
			showControls: false,
			showProgress: false,
			showPlayCountInfo: false,
			showLyrics: false,
			colors: false
		}
	}
}
